<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自然之道，是谓数学</title>
    <link>https://shuxuezhuyi.github.io/</link>
    <description>Recent content on 自然之道，是谓数学</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2018-2021 数学主义. Licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sat, 26 Jun 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://shuxuezhuyi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Lean Theorem Prover 安装手记</title>
        <link>https://shuxuezhuyi.github.io/post/lean/</link>
        <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://shuxuezhuyi.github.io/post/lean/</guid>
        <description>自然之道，是谓数学 https://shuxuezhuyi.github.io/post/lean/ -&lt;p&gt;我主要是遵循 &lt;a href=&#34;https://leanprover-community.github.io/install/debian_details.html&#34;&gt;https://leanprover-community.github.io/install/debian_details.html&lt;/a&gt; 来安装。&lt;/p&gt;
&lt;p&gt;在虚拟机中安装 debian11，配置 4G 内存与 4G 交换空间。创建标准用户。以标准用户身份登陆，然后在终端依次执行以下命令（感觉直接以 root 身份登陆执行更恰当）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget -O code.deb https://go.microsoft.com/fwlink/?LinkID=&lt;span style=&#34;color:#b452cd&#34;&gt;760868&lt;/span&gt;
sudo apt install -y git curl python3 python3-pip python3-venv
sudo apt install ./code.deb
rm code.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前往 &lt;a href=&#34;https://github.com/leanprover/elan/blob/master/elan-init.sh&#34;&gt;https://github.com/leanprover/elan/blob/master/elan-init.sh&lt;/a&gt; 复制 elan-init.sh 的内容到 &lt;code&gt;~/elan-init.sh&lt;/code&gt; 中（也可以用 &lt;code&gt;git clone --depth=1 https://github.com/leanprover/elan.git&lt;/code&gt; 把仓库克隆最新版本下来再把文件找出来），然后继续在终端依次执行以下命令（要用标准用户，别用 root 用户）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;bash elan-init.sh -y
code --install-extension jroesch.lean
python3 -m pip install --user pipx
python3 -m pipx ensurepath
&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt; ~/.profile
pipx install mathlibtools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后打开 &lt;code&gt;~/.bashrc&lt;/code&gt; ，把 &lt;code&gt;~/.elan/bin&lt;/code&gt; 添加到路径中。&lt;/p&gt;
&lt;p&gt;退出登陆，然后依然以标准用户身份重新登陆。在终端依次执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;leanproject get tutorials
code tutorials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在 VS Code 运行起来了。有可能会提示安装 Lean 的插件、然后要重配置 leanpkg，照着做就好。&lt;/p&gt;
&lt;p&gt;如果发现运行起来吃内存太多（超过4G），那么可能是 mathlib 没有现成的 olean 文件。此时，在项目根目录中（例如 tutorials 目录中）运行 &lt;code&gt;leanproject get-mathlib-cache&lt;/code&gt; 从网上下载现成的 olean 文件。完成之后，内存占用就会变得可以接受啦。&lt;/p&gt;
- https://shuxuezhuyi.github.io/post/lean/ - 2018-2021 数学主义. Licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>使用 Lean 写证明（写作中）</title>
        <link>https://shuxuezhuyi.github.io/post/%E4%BD%BF%E7%94%A8lean%E5%86%99%E8%AF%81%E6%98%8E/</link>
        <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
        
        <guid>https://shuxuezhuyi.github.io/post/%E4%BD%BF%E7%94%A8lean%E5%86%99%E8%AF%81%E6%98%8E/</guid>
        <description>自然之道，是谓数学 https://shuxuezhuyi.github.io/post/%E4%BD%BF%E7%94%A8lean%E5%86%99%E8%AF%81%E6%98%8E/ -&lt;h2 id=&#34;lean-中的证明如何终止&#34;&gt;Lean 中的证明如何终止&lt;/h2&gt;
&lt;p&gt;类型论只有一个核心概念：类型。命题也是一种类型。&lt;strong&gt;证明&lt;/strong&gt;一个命题就是构造一个类型的对象的过程。&lt;/p&gt;
&lt;p&gt;Lean 中命题的类型就是 &lt;em&gt;Prop&lt;/em&gt;。如果 P 的类型是 Prop，而 Q 的类型是 P，则 Q 是 P 的一个证明。使用 &lt;code&gt;#check 表达式&lt;/code&gt; 即可检查表达式的类型。&lt;/p&gt;
&lt;p&gt;证明的标准写法：&lt;code&gt;theorem 类型A : 类型B := 类型A 的定义&lt;/code&gt;，这可以想象成 &lt;code&gt;theorem 证法A : 命题 B := 证法A 的内容&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要省略一个证明，可以用 &lt;code&gt;sorry&lt;/code&gt;，就像这样：&lt;code&gt;theorem 这太难了 : 费马大定理 := sorry&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;lean-如何检查证明&#34;&gt;Lean 如何检查证明&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-lean&#34; data-lang=&#34;lean&#34;&gt;example (a b c : ℝ) : (a * b) * c = b * (a * c) :=
begin
  rw mul_comm a b,
  rw mul_assoc b a c
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上述证明中，要证明的目标（goal）是“对任意实数 $a,b,c$ 都有 $(a* b) * c=b* (a* c)$”。Lean 检查证明的过程，就是逐行执行位于 &lt;code&gt;begin&lt;/code&gt; 与 &lt;code&gt;end&lt;/code&gt; 之间的代码，而执行每一行代码都意味着把当前目标变换为新的目标。&lt;/p&gt;
&lt;p&gt;目标（goal）由语境（context）和靶（target）构成。例如，如果你在 Lean infoview 看到：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-lean&#34; data-lang=&#34;lean&#34;&gt;1 goal
x y : ℕ,
h₁ : prime x,
h₂ : ¬even x,
h₃ : y &amp;gt; x
⊢ y ≥ 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么 &lt;code&gt;x y : ℕ, h₁ : prime x, h₂ : ¬even x, h₃ : y &amp;gt; x&lt;/code&gt; 是语境，而 &lt;code&gt;y ≥ 4&lt;/code&gt; 是靶；在这个语境中，&lt;code&gt;x y : ℕ&lt;/code&gt; 指明涉及的对象，而 &lt;code&gt;h₁ : prime x, h₂ : ¬even x, h₃ : y &amp;gt; x&lt;/code&gt; 列举了三个假设（assumption）。&lt;/p&gt;
&lt;h2 id=&#34;如何输入符号&#34;&gt;如何输入符号&lt;/h2&gt;
&lt;p&gt;注意有很多都是 LaTeX 中的写法。&lt;/p&gt;
&lt;p&gt;数字下标：使用 &lt;code&gt;h\1&lt;/code&gt; 得到 &lt;code&gt;h₁&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实数集 ℝ：&lt;code&gt;\R&lt;/code&gt; 或 &lt;code&gt;\real&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;左箭头 ←：&lt;code&gt;\l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;右箭头 →：&lt;code&gt;\r&lt;/code&gt; 或 &lt;code&gt;\to&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;希腊字母：就用 LaTeX 中的写法，例如 ε 就是 &lt;code&gt;\epsilon&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;∀：&lt;code&gt;\forall&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;∃：&lt;code&gt;\exists&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;¬ ：&lt;code&gt;\not&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;∧：&lt;code&gt;\and&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;∨：&lt;code&gt;\or&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;↔：&lt;code&gt;\iff&lt;/code&gt; 或 &lt;code&gt;\lr&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;局部变量&#34;&gt;局部变量&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-lean&#34; data-lang=&#34;lean&#34;&gt;section
variables a b c : ℝ
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里 &lt;code&gt;section ... end&lt;/code&gt; 声明了局部环境，把 &lt;code&gt;variables&lt;/code&gt; 的作用范围约束其中；在这个 section 中，variables 的声明会被其他所有命令捕获。&lt;/p&gt;
&lt;h2 id=&#34;用反证法与逆否命题&#34;&gt;用反证法与逆否命题&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-lean&#34; data-lang=&#34;lean&#34;&gt;import data.real.basic  -- 涉及实数需要它
import tactic.push_neg  -- 它收录了这里用到的 push_neg 与 contrapose!
open_locale classical  -- 用反证法（by_contradiction）需要它，因为要有排中律

variables a b c : Prop  -- 约定 a, b, c 都是命题
variables ε δ : ℝ  -- 约定 ε与δ 都是实数
variables x : ℝ  -- 约定 x 也是实数，其实可以合并到上一行去
variable f : ℝ → ℝ  -- 约定 f 是定义在实数集上的实值函数

-- 下面这个名叫 f_0 的“引理”说 f 在原点连续。在 Lean 中，关键字 lemma 与关键字 theorem 是一回事。
-- 这里的写法是 lemma 引理名 (引理条件被省略了) : 引理的结论 :=
-- 此引理的结论的写法是：任意ε (满足名叫h1的假设 : ε &amp;gt; 0), 存在δ (满足名叫h2的假设 : δ &amp;gt; 0) , （使得对）任意 x (满足名叫h3的假设 :  x 的绝对值 &amp;lt; δ) , （成立）f x &amp;lt; ε
lemma f_0 : ∀ ε (h1 : ε &amp;gt; 0) , ∃ δ (h2 : δ &amp;gt; 0) , ∀ x (h3 : abs x &amp;lt; δ) , f x &amp;lt; ε :=
begin
  by_contradiction H,   -- 原本的靶（作为命题）的否定在这里被命名为 H，这是一条新增的假设，然后靶会被替换成 false （意味着最终必须推出矛盾）。
  push_neg at H,  -- 进一步把 H 左边的 ¬ 一直推到最右边，得到我们熟悉的反证法的第一步。
  sorry,
end

-- 下面是一个省略了名字与条件、只有结论的例题（example）
example : ¬ (a → b) →  a ∧ ¬ b ∨ c :=
begin
  contrapose!,  -- 转为证明逆否命题
  sorry,
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;Jeremy Avigad, &lt;em&gt;Type Theory and Practical Foundations&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mathematics in Lean&lt;/em&gt;, &lt;a href=&#34;https://leanprover-community.github.io/mathematics_in_lean/index.html&#34;&gt;https://leanprover-community.github.io/mathematics_in_lean/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HoTT学习笔记1：类型论基础&lt;/em&gt;, &lt;a href=&#34;https://zhuanlan.zhihu.com/p/33483631&#34;&gt;https://zhuanlan.zhihu.com/p/33483631&lt;/a&gt;&lt;/p&gt;
- https://shuxuezhuyi.github.io/post/%E4%BD%BF%E7%94%A8lean%E5%86%99%E8%AF%81%E6%98%8E/ - 2018-2021 数学主义. Licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
        <item>
        <title>我的 LyX 快捷键 (v1.0)</title>
        <link>https://shuxuezhuyi.github.io/post/lyxbind-v1/</link>
        <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://shuxuezhuyi.github.io/post/lyxbind-v1/</guid>
        <description>自然之道，是谓数学 https://shuxuezhuyi.github.io/post/lyxbind-v1/ -&lt;h2 id=&#34;如何开始&#34;&gt;如何开始&lt;/h2&gt;
&lt;p&gt;从Gitee下载：&lt;a href=&#34;https://gitee.com/mathist/LyXBind/tree/v1.0&#34;&gt;https://gitee.com/mathist/LyXBind/tree/v1.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里用到三个文件：main.bind， lyx.ahk 和 template.lyx (Linux用户不需要 lyx.ahk)&lt;/p&gt;
&lt;p&gt;LyX ▷ 工具 ▷ 首选项 ▷ 编辑 ▷ 快捷键 ▷ 浏览&lt;/p&gt;
&lt;p&gt;选中下载到的 main.bind，点确定以关闭“首选项”窗口使之生效。&lt;/p&gt;
&lt;p&gt;Windows用户需要下载AutoHotkey：&lt;a href=&#34;https://www.autohotkey.com&#34;&gt;https://www.autohotkey.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装AutoHotkey之后，双击 lyx.ahk 即可运行。它只有一行代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!Space::SendInput {F13}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;功能是使 &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;ALT&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;空格&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; 发送 &lt;!-- raw HTML omitted --&gt;F13&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;
&lt;p&gt;以 template.lyx 为模板新建文档，即可正常使用这里的所有快捷键。&lt;/p&gt;
&lt;h2 id=&#34;用到的键位&#34;&gt;用到的键位&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;blank.svg&#34; alt=&#34;keyboard&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ctrl-引导的快捷键&#34;&gt;Ctrl 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;C.svg&#34; alt=&#34;Ctrl&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;alt-引导的快捷键&#34;&gt;Alt 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M.svg&#34; alt=&#34;Alt&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;alta-引导的快捷键&#34;&gt;Alt+a 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M-a.svg&#34; alt=&#34;Alt+a&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;altf-引导的快捷键&#34;&gt;Alt+f 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M-f.svg&#34; alt=&#34;Alt+f&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;alti-引导的快捷键&#34;&gt;Alt+i 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M-i.svg&#34; alt=&#34;Alt+i&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;altm-引导的快捷键&#34;&gt;Alt+m 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M-m.svg&#34; alt=&#34;Alt+m&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;altn-引导的快捷键&#34;&gt;Alt+n 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M-n.svg&#34; alt=&#34;Alt+n&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;alto-引导的快捷键&#34;&gt;Alt+o 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M-o.svg&#34; alt=&#34;Alt+o&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;alt英文逗号-引导的快捷键&#34;&gt;Alt+英文逗号 引导的快捷键&lt;/h2&gt;
&lt;p&gt;有26个快捷键&lt;/p&gt;
&lt;p&gt;功能：用小写字母输入花体大写字母&lt;/p&gt;
&lt;p&gt;例如：按下Alt + 逗号，松手，再按下a，即可得到 $\mathcal{{\color{red}A}}$&lt;/p&gt;
&lt;h2 id=&#34;alt英文句号-引导的快捷键&#34;&gt;Alt+英文句号 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;M-period.svg&#34; alt=&#34;Alt+.&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数字-4-引导的快捷键&#34;&gt;数字 4 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;4.svg&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数字-5-引导的快捷键&#34;&gt;数字 5 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;5.svg&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数字-7-引导的快捷键&#34;&gt;数字 7 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;7.svg&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数字-8-引导的快捷键&#34;&gt;数字 8 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;8.svg&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数字-9-引导的快捷键&#34;&gt;数字 9 引导的快捷键&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;9.svg&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
- https://shuxuezhuyi.github.io/post/lyxbind-v1/ - 2018-2021 数学主义. Licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</description>
        </item>
    
    
    
    
  </channel>
</rss> 